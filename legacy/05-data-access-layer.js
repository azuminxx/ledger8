/**
 * üåâ „Éá„Éº„Çø„Ç¢„ÇØ„Çª„ÇπÊäΩË±°ÂåñÂ±§ - Phase 6-2
 * @description Êó¢Â≠ò„Ç≥„Éº„Éâ„Å®Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„ÅÆÊ©ãÊ∏°„Åó
 * @version 1.0.0
 */

/**
 * üéØ „Éá„Éº„Çø„Ç¢„ÇØ„Çª„ÇπÊäΩË±°Âåñ„ÇØ„É©„Çπ
 * @description Êó¢Â≠ò„ÅÆAPIÂëº„Å≥Âá∫„Åó„ÇíÁµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´ÂØæÂøú„Å´ÈÄèÈÅéÁöÑ„Å´Â§âÊèõ
 */
class DataAccessLayer {
  constructor() {
    this.isEnabled = false;
    this.fallbackMode = false;
    this.operationLog = [];
  }

  /**
   * „Éá„Éº„Çø„Ç¢„ÇØ„Çª„ÇπÂ±§„ÇíÊúâÂäπÂåñ
   */
  enable() {
    this.isEnabled = true;
    this._interceptExistingFunctions();
  }

  /**
   * „Éá„Éº„Çø„Ç¢„ÇØ„Çª„ÇπÂ±§„ÇíÁÑ°ÂäπÂåñÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
   */
  disable() {
    this.isEnabled = false;
    this.fallbackMode = true;
    this._restoreOriginalFunctions();
  }

  /**
   * Êó¢Â≠òÈñ¢Êï∞„Çí„Ç§„É≥„Çø„Éº„Çª„Éó„Éà
   */
  _interceptExistingFunctions() {
    // getRecordÈñ¢Êï∞„ÅÆÁΩÆ„ÅçÊèõ„Åà
    if (typeof window.getRecord === "function") {
      this._originalGetRecord = window.getRecord;
      window.getRecord = this.getRecord.bind(this);
    }

    // updateRecordÈñ¢Êï∞„ÅÆÁΩÆ„ÅçÊèõ„Åà
    if (typeof window.updateRecord === "function") {
      this._originalUpdateRecord = window.updateRecord;
      window.updateRecord = this.updateRecord.bind(this);
    }

    // deleteRecordÈñ¢Êï∞„ÅÆÁΩÆ„ÅçÊèõ„Åà
    if (typeof window.deleteRecord === "function") {
      this._originalDeleteRecord = window.deleteRecord;
      window.deleteRecord = this.deleteRecord.bind(this);
    }

    // addRecordÈñ¢Êï∞„ÅÆÁΩÆ„ÅçÊèõ„Åà
    if (typeof window.addRecord === "function") {
      this._originalAddRecord = window.addRecord;
      window.addRecord = this.addRecord.bind(this);
    }

    // searchRecordsÈñ¢Êï∞„ÅÆÁΩÆ„ÅçÊèõ„Åà
    if (typeof window.searchRecords === "function") {
      this._originalSearchRecords = window.searchRecords;
      window.searchRecords = this.searchRecords.bind(this);
    }
  }

  /**
   * ÂÖÉ„ÅÆÈñ¢Êï∞„ÇíÂæ©ÂÖÉ
   */
  _restoreOriginalFunctions() {
    if (this._originalGetRecord) {
      window.getRecord = this._originalGetRecord;
    }
    if (this._originalUpdateRecord) {
      window.updateRecord = this._originalUpdateRecord;
    }
    if (this._originalDeleteRecord) {
      window.deleteRecord = this._originalDeleteRecord;
    }
    if (this._originalAddRecord) {
      window.addRecord = this._originalAddRecord;
    }
    if (this._originalSearchRecords) {
      window.searchRecords = this._originalSearchRecords;
    }
  }

  /**
   * „É¨„Ç≥„Éº„ÉâÂèñÂæóÔºàÁµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´ÂØæÂøúÔºâ
   */
  async getRecord(integrationKey, options = {}) {
    this._logOperation("getRecord", { integrationKey, options });

    if (!this.isEnabled) {
      return this._fallbackGetRecord(integrationKey, options);
    }

    try {
      // Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Åã„ÇâÂèñÂæó - Ê≠£„Åó„ÅÑAPI„Çí‰ΩøÁî®
      let rowData = null;

      // ÊñπÊ≥ï1: Áµ±Âêà„Ç≠„Éº„ÅßÁõ¥Êé•Ê§úÁ¥¢ÔºàÊ≠£„Åó„ÅÑ„É°„ÇΩ„ÉÉ„ÉâÔºâ
      rowData = dataModelManager.getRowByIntegrationKey(integrationKey);

      // ÊñπÊ≥ï2: getAllRows„Åã„ÇâÁµ±Âêà„Ç≠„Éº„ÅßÊ§úÁ¥¢Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
      if (!rowData) {
        const allRows = dataModelManager.getAllRows();
        rowData = allRows.find((row) => row.integrationKey === integrationKey);
      }

      if (rowData) {
        // „É¨„Ç¨„Ç∑„ÉºÂΩ¢Âºè„Å´Â§âÊèõ„Åó„Å¶Ëøî„Åô
        const legacyRecord = this._convertRowDataToLegacy(rowData, options);
        return legacyRecord;
      } else {
        console.warn(`‚ö†Ô∏è „É¨„Ç≥„Éº„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${integrationKey}`);

        // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂá∫Âäõ
        const allRows = dataModelManager.getAllRows();
        allRows.forEach((row, index) => {
          console.warn(`     ${index + 1}. "${row.integrationKey}"`);
        });

        return null;
      }
    } catch (error) {
      console.error(`‚ùå „É¨„Ç≥„Éº„ÉâÂèñÂæó„Ç®„É©„Éº: ${integrationKey}`, error);

      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇíË©¶Ë°å
      if (options.allowFallback !== false) {
        return this._fallbackGetRecord(integrationKey, options);
      } else {
        throw error;
      }
    }
  }

  /**
   * „É¨„Ç≥„Éº„ÉâÊõ¥Êñ∞ÔºàÁµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´ÂØæÂøúÔºâ
   */
  async updateRecord(integrationKey, updateData, options = {}) {
    this._logOperation("updateRecord", { integrationKey, updateData, options });

    if (!this.isEnabled) {
      return this._fallbackUpdateRecord(integrationKey, updateData, options);
    }

    try {
      // Êó¢Â≠ò„É¨„Ç≥„Éº„Éâ„ÇíÂèñÂæó
      let rowData = dataModelManager.getRow(integrationKey);

      if (!rowData) {
        console.warn(`‚ö†Ô∏è Êõ¥Êñ∞ÂØæË±°„É¨„Ç≥„Éº„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${integrationKey}`);
        if (options.createIfNotExists) {
          rowData = new RowDataModel();
        } else {
          throw new Error(`„É¨„Ç≥„Éº„Éâ„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì: ${integrationKey}`);
        }
      }

      // Êõ¥Êñ∞„Éá„Éº„Çø„ÇíÁµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Å´ÈÅ©Áî®
      rowData = this._applyUpdateToRowData(rowData, updateData);

      // Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Å´‰øùÂ≠ò
      const success = dataModelManager.setRow(rowData);

      if (success) {
        // „É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†„Å´„ÇÇÂêåÊúü
        if (!options.skipLegacySync) {
          await this._syncToLegacySystems(rowData);
        }

        return this._convertRowDataToLegacy(rowData, options);
      } else {
        throw new Error("Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Å∏„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      }
    } catch (error) {
      console.error(`‚ùå „É¨„Ç≥„Éº„ÉâÊõ¥Êñ∞„Ç®„É©„Éº: ${integrationKey}`, error);

      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇíË©¶Ë°å
      if (options.allowFallback !== false) {
        return this._fallbackUpdateRecord(integrationKey, updateData, options);
      } else {
        throw error;
      }
    }
  }

  /**
   * „É¨„Ç≥„Éº„ÉâÂâäÈô§ÔºàÁµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´ÂØæÂøúÔºâ
   */
  async deleteRecord(integrationKey, options = {}) {
    this._logOperation("deleteRecord", { integrationKey, options });

    if (!this.isEnabled) {
      return this._fallbackDeleteRecord(integrationKey, options);
    }

    try {
      // Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Åã„ÇâÂâäÈô§
      const success = dataModelManager.removeRow(integrationKey);

      if (success) {
        // „É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†„Åã„Çâ„ÇÇÂâäÈô§
        if (!options.skipLegacySync) {
          await this._deleteFromLegacySystems(integrationKey);
        }

        return { success: true, integrationKey };
      } else {
        throw new Error("Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Åã„Çâ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      }
    } catch (error) {
      console.error(`‚ùå „É¨„Ç≥„Éº„ÉâÂâäÈô§„Ç®„É©„Éº: ${integrationKey}`, error);

      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇíË©¶Ë°å
      if (options.allowFallback !== false) {
        return this._fallbackDeleteRecord(integrationKey, options);
      } else {
        throw error;
      }
    }
  }

  /**
   * „É¨„Ç≥„Éº„ÉâËøΩÂä†ÔºàÁµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´ÂØæÂøúÔºâ
   */
  async addRecord(recordData, options = {}) {
    this._logOperation("addRecord", { recordData, options });

    if (!this.isEnabled) {
      return this._fallbackAddRecord(recordData, options);
    }

    try {
      // „É¨„Ç¨„Ç∑„ÉºÂΩ¢Âºè„Åã„ÇâÁµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Å´Â§âÊèõ
      let rowData = this._convertLegacyToRowData(recordData);

      // Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Å´‰øùÂ≠ò
      const success = dataModelManager.setRow(rowData);

      if (success) {
        // „É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†„Å´„ÇÇÂêåÊúü
        if (!options.skipLegacySync) {
          await this._syncToLegacySystems(rowData);
        }

        return this._convertRowDataToLegacy(rowData, options);
      } else {
        throw new Error("Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Å∏„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      }
    } catch (error) {
      console.error(`‚ùå „É¨„Ç≥„Éº„ÉâËøΩÂä†„Ç®„É©„Éº:`, error);

      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇíË©¶Ë°å
      if (options.allowFallback !== false) {
        return this._fallbackAddRecord(recordData, options);
      } else {
        throw error;
      }
    }
  }

  /**
   * „É¨„Ç≥„Éº„ÉâÊ§úÁ¥¢ÔºàÁµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´ÂØæÂøúÔºâ
   */
  async searchRecords(searchConditions, options = {}) {
    this._logOperation("searchRecords", { searchConditions, options });

    if (!this.isEnabled) {
      return this._fallbackSearchRecords(searchConditions, options);
    }

    try {
      // Áµ±‰∏Ä„Éá„Éº„Çø„É¢„Éá„É´„Åã„ÇâÊ§úÁ¥¢
      const allRows = dataModelManager.getAllRows();
      const filteredRows = this._filterRows(allRows, searchConditions);

      // „É¨„Ç¨„Ç∑„ÉºÂΩ¢Âºè„Å´Â§âÊèõ
      const legacyRecords = filteredRows.map((row) =>
        this._convertRowDataToLegacy(row, options)
      );

      return {
        records: legacyRecords,
        totalCount: legacyRecords.length,
      };
    } catch (error) {
      console.error(`‚ùå „É¨„Ç≥„Éº„ÉâÊ§úÁ¥¢„Ç®„É©„Éº:`, error);

      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇíË©¶Ë°å
      if (options.allowFallback !== false) {
        return this._fallbackSearchRecords(searchConditions, options);
      } else {
        throw error;
      }
    }
  }

  /**
   * RowData„Çí„É¨„Ç¨„Ç∑„ÉºÂΩ¢Âºè„Å´Â§âÊèõ
   */
  _convertRowDataToLegacy(rowData, options = {}) {
    const activeAppTypes = rowData.getActiveAppTypes();

    if (activeAppTypes.length === 1) {
      // Âçò‰∏Ä„Ç¢„Éó„É™„ÅÆÂ†¥Âêà
      const appType = activeAppTypes[0];
      const appData = rowData.getAppData(appType);
      const record = {};

      for (const [fieldCode, fieldValue] of appData.fields) {
        record[fieldCode] = {
          value: fieldValue.value,
          type: fieldValue.type || "SINGLE_LINE_TEXT",
        };
      }

      if (appData.recordId) {
        record.$id = { value: appData.recordId };
      }

      return record;
    } else {
      // Áµ±Âêà„É¨„Ç≥„Éº„Éâ„ÅÆÂ†¥Âêà
      const integratedRecord = {
        isIntegratedRecord: true,
        integrationKey: rowData.integrationKey,
        ledgerData: {},
        recordIds: {},
      };

      for (const appType of activeAppTypes) {
        const appData = rowData.getAppData(appType);
        integratedRecord.ledgerData[appType] = {};

        for (const [fieldCode, fieldValue] of appData.fields) {
          integratedRecord.ledgerData[appType][fieldCode] = {
            value: fieldValue.value,
            type: fieldValue.type || "SINGLE_LINE_TEXT",
          };
        }

        if (appData.recordId) {
          integratedRecord.recordIds[appType] = appData.recordId;
        }
      }

      return integratedRecord;
    }
  }

  /**
   * „É¨„Ç¨„Ç∑„ÉºÂΩ¢Âºè„ÇíRowData„Å´Â§âÊèõ
   */
  _convertLegacyToRowData(legacyRecord) {
    let rowData = new RowDataModel();

    if (legacyRecord.isIntegratedRecord) {
      // Áµ±Âêà„É¨„Ç≥„Éº„Éâ„ÅÆÂ†¥Âêà
      for (const [appType, fields] of Object.entries(legacyRecord.ledgerData)) {
        if (APP_TYPES[appType]) {
          for (const [fieldCode, fieldData] of Object.entries(fields)) {
            const value = fieldData.value || fieldData;
            rowData = rowData.setField(appType, fieldCode, value);
          }

          if (legacyRecord.recordIds && legacyRecord.recordIds[appType]) {
            rowData = rowData.setRecordId(
              appType,
              legacyRecord.recordIds[appType]
            );
          }
        }
      }
    } else {
      // Âçò‰∏Ä„É¨„Ç≥„Éº„Éâ„ÅÆÂ†¥Âêà
      const appType = this._detectAppTypeFromRecord(legacyRecord);
      if (appType) {
        for (const [fieldCode, fieldData] of Object.entries(legacyRecord)) {
          if (fieldCode !== "$id" && fieldCode !== "$revision") {
            const value = fieldData.value || fieldData;
            rowData = rowData.setField(appType, fieldCode, value);
          }
        }

        if (legacyRecord.$id?.value) {
          rowData = rowData.setRecordId(appType, legacyRecord.$id.value);
        }
      }
    }

    return rowData;
  }

  /**
   * Êõ¥Êñ∞„Éá„Éº„Çø„ÇíRowData„Å´ÈÅ©Áî®
   */
  _applyUpdateToRowData(rowData, updateData) {
    for (const [fieldCode, value] of Object.entries(updateData)) {
      // „Éï„Ç£„Éº„É´„Éâ„ÅåÂ±û„Åô„Çã„Ç¢„Éó„É™„Çø„Ç§„Éó„ÇíÁâπÂÆö
      const appType = this._detectAppTypeForField(fieldCode, rowData);
      if (appType) {
        rowData = rowData.setField(appType, fieldCode, value);
      }
    }

    return rowData;
  }

  /**
   * „É¨„Ç≥„Éº„Éâ„Åã„Çâ„Ç¢„Éó„É™„Çø„Ç§„Éó„ÇíÊ§úÂá∫
   */
  _detectAppTypeFromRecord(record) {
    if (record["Â∫ßÂ∏≠Áï™Âè∑"]) return "SEAT";
    if (record["PCÁï™Âè∑"]) return "PC";
    if (record["ÂÜÖÁ∑öÁï™Âè∑"]) return "EXT";
    if (record["„É¶„Éº„Ç∂„ÉºID"]) return "USER";
    return null;
  }

  /**
   * „Éï„Ç£„Éº„É´„Éâ„ÅÆ„Ç¢„Éó„É™„Çø„Ç§„Éó„ÇíÊ§úÂá∫
   */
  _detectAppTypeForField(fieldCode, rowData) {
    // fieldsConfig„Åã„ÇâÂãïÁöÑ„Å´„Ç¢„Éó„É™„Çø„Ç§„Éó„ÇíÂèñÂæó
    if (window.fieldsConfig) {
      const field = window.fieldsConfig.find((f) => f.fieldCode === fieldCode);
      if (field && field.sourceApp) {
        return field.sourceApp;
      }
    }

    // Êó¢Â≠ò„Éá„Éº„Çø„Åã„ÇâÊé®ÂÆöÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
    for (const appType of rowData.getActiveAppTypes()) {
      const appData = rowData.getAppData(appType);
      if (appData.fields.has(fieldCode)) {
        return appType;
      }
    }

    return null;
  }

  /**
   * Ë°å„Éá„Éº„Çø„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
   */
  _filterRows(rows, conditions) {
    return rows.filter((row) => {
      for (const [field, value] of Object.entries(conditions)) {
        let found = false;

        for (const appType of row.getActiveAppTypes()) {
          const appData = row.getAppData(appType);
          const fieldValue = appData.fields.get(field);

          if (fieldValue && fieldValue.value === value) {
            found = true;
            break;
          }
        }

        if (!found) {
          return false;
        }
      }

      return true;
    });
  }

  /**
   * „É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†„Å´ÂêåÊúü
   */
  async _syncToLegacySystems(rowData) {
    try {
      // „Ç∞„É≠„Éº„Éê„É´recordsÈÖçÂàó„ÇíÊõ¥Êñ∞
      if (window.legacyIntegration) {
        window.legacyIntegration.syncToLegacy();
      }

      // CellStateManager„ÇíÊõ¥Êñ∞
      if (window.cellStateManager) {
        const state = this._convertRowDataToState(rowData);
        window.cellStateManager.setInitialState(rowData.integrationKey, state);
      }
    } catch (error) {
      console.warn(
        `‚ö†Ô∏è „É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†ÂêåÊúü„Åß„Ç®„É©„Éº: ${rowData.integrationKey}`,
        error
      );
    }
  }

  /**
   * „É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†„Åã„ÇâÂâäÈô§
   */
  async _deleteFromLegacySystems(integrationKey) {
    try {
      // „Ç∞„É≠„Éº„Éê„É´recordsÈÖçÂàó„Åã„ÇâÂâäÈô§
      if (window.records && Array.isArray(window.records)) {
        window.records = window.records.filter(
          (record) => record.integrationKey !== integrationKey
        );
      }

      // CellStateManager„Åã„ÇâÂâäÈô§
      if (window.cellStateManager) {
        window.cellStateManager.removeInitialState(integrationKey);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è „É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†ÂâäÈô§„Åß„Ç®„É©„Éº: ${integrationKey}`, error);
    }
  }

  /**
   * RowData„ÇíÁä∂ÊÖãÂΩ¢Âºè„Å´Â§âÊèõ
   */
  _convertRowDataToState(rowData) {
    const state = {};

    for (const appType of rowData.getActiveAppTypes()) {
      const appData = rowData.getAppData(appType);
      for (const [fieldCode, fieldValue] of appData.fields) {
        state[fieldCode] = fieldValue.value;
      }
    }

    return state;
  }

  /**
   * „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞Áæ§
   */
  _fallbackGetRecord(integrationKey, options) {
    if (this._originalGetRecord) {
      return this._originalGetRecord(integrationKey, options);
    }
    throw new Error("ÂÖÉ„ÅÆgetRecordÈñ¢Êï∞„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì");
  }

  _fallbackUpdateRecord(integrationKey, updateData, options) {
    if (this._originalUpdateRecord) {
      return this._originalUpdateRecord(integrationKey, updateData, options);
    }
    throw new Error("ÂÖÉ„ÅÆupdateRecordÈñ¢Êï∞„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì");
  }

  _fallbackDeleteRecord(integrationKey, options) {
    if (this._originalDeleteRecord) {
      return this._originalDeleteRecord(integrationKey, options);
    }
    throw new Error("ÂÖÉ„ÅÆdeleteRecordÈñ¢Êï∞„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì");
  }

  _fallbackAddRecord(recordData, options) {
    if (this._originalAddRecord) {
      return this._originalAddRecord(recordData, options);
    }
    throw new Error("ÂÖÉ„ÅÆaddRecordÈñ¢Êï∞„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì");
  }

  _fallbackSearchRecords(searchConditions, options) {
    if (this._originalSearchRecords) {
      return this._originalSearchRecords(searchConditions, options);
    }
    throw new Error("ÂÖÉ„ÅÆsearchRecordsÈñ¢Êï∞„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì");
  }

  /**
   * Êìç‰Ωú„É≠„Ç∞Ë®òÈå≤
   */
  _logOperation(operation, params) {
    this.operationLog.push({
      timestamp: new Date(),
      operation,
      params: JSON.stringify(params),
      enabled: this.isEnabled,
    });

    // „É≠„Ç∞„Çµ„Ç§„Ç∫Âà∂Èôê
    if (this.operationLog.length > 1000) {
      this.operationLog = this.operationLog.slice(-500);
    }
  }

  /**
   * Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó
   */
  getStatistics() {
    const stats = {
      isEnabled: this.isEnabled,
      fallbackMode: this.fallbackMode,
      totalOperations: this.operationLog.length,
      operationsByType: {},
    };

    for (const log of this.operationLog) {
      if (!stats.operationsByType[log.operation]) {
        stats.operationsByType[log.operation] = 0;
      }
      stats.operationsByType[log.operation]++;
    }

    return stats;
  }
}

// „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê
window.dataAccessLayer = new DataAccessLayer();
